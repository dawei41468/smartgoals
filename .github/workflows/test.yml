name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run frontend tests
      run: npm run test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('api/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd api
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for MongoDB
      run: |
        until nc -z localhost 27017; do
          echo "Waiting for MongoDB..."
          sleep 2
        done
        echo "MongoDB is ready!"

    - name: Run backend tests
      env:
        MONGODB_URI: mongodb://localhost:27017
        MONGODB_DB: smartgoals_test
        JWT_SECRET: test_jwt_secret_for_ci
        ENV: test
      run: |
        cd api
        pytest --cov=api --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./api/coverage.xml
        flags: backend
        name: backend-coverage

  test-integration:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20.x"
        cache: 'npm'

    - name: Install frontend dependencies
      run: npm ci

    - name: Install backend dependencies
      run: |
        cd api
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for MongoDB
      run: |
        until nc -z localhost 27017; do
          echo "Waiting for MongoDB..."
          sleep 2
        done
        echo "MongoDB is ready!"

    - name: Start backend server
      env:
        MONGODB_URI: mongodb://localhost:27017
        MONGODB_DB: smartgoals_integration_test
        JWT_SECRET: integration_test_secret
        ENV: test
      run: |
        cd api
        python -m uvicorn api.main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Run integration tests
      run: |
        # Add integration tests here when ready
        echo "Integration tests would run here"
        # Example: npm run test:integration

  quality-checks:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20.x"
        cache: 'npm'

    - name: Install backend dependencies
      run: |
        cd api
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install frontend dependencies
      run: npm ci

    - name: Run frontend linting
      run: npm run check

    - name: Check backend code quality
      run: |
        cd api
        # Add backend linting/checking here
        # Example: flake8 . || black --check . || mypy .

    - name: Check test coverage thresholds
      run: |
        # Frontend coverage check
        if [ -f coverage/lcov.info ]; then
          # Add coverage threshold checks
          echo "Coverage files exist"
        fi

        # Backend coverage check
        if [ -f api/coverage.xml ]; then
          # Add coverage threshold checks
          echo "Backend coverage file exists"
        fi